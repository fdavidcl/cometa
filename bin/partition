#!/usr/bin/env Rscript

require(mldr)
require(mldr.datasets)

name_of <- function(file) {
    sub(".rds", "", basename(file), fixed = TRUE)
}

STRATEGIES <-
    list(rand = mldr.datasets::random.kfolds,
         stra = mldr.datasets::stratified.kfolds,
         iter = mldr.datasets::iterative.stratification.kfolds
         )
FORMATS <- c("mulan", "meka", "libsvm", "keel")

SEED <- 23456123
ALT_SEED <- 31638452

                                        # validation functions:
                                        # (mld : "mldr", f : (mld, k, seed) -> mldr.folds) -> list() : named list with a mldr for each file to be written
VALIDATION <- list (
    hout = function(mld, f) {
        folds <- f(mld, k = 10, seed = SEED, get.indices = T)
        list(
            tra = Reduce(c, lapply(folds[1:6], function(x) x$test)),
            tst = Reduce(c, lapply(folds[7:10], function(x) x$test))
        )
    },

    "2x5" = function(mld, f) {
        folds <- c(f(mld, k = 5, seed = SEED, get.indices = T),
                   f(mld, k = 5, seed = ALT_SEED, get.indices = T))

                                        # Name each fold and flatten the list of lists
        Reduce(c, lapply(1:length(folds), function(i) {
            l = list(folds[[i]]$train, folds[[i]]$test)
            names(l) <- c(paste0(i, "-tra"), paste0(i, "-tst"))
            l
        }))
    },

    "1x10" = function(mld, f) {
        folds <- f(mld, k = 10, seed = SEED, get.indices = T)

                                        # Name each fold and flatten the list of lists
        Reduce(c, lapply(1:length(folds), function(i) {
            l = list(folds[[i]]$train, folds[[i]]$test)
            names(l) <- c(paste0(i, "-tra"), paste0(i, "-tst"))
            l
        }))
    }
)

partition <- function(mld, name, dir) {
    sparse = mldr.datasets::sparsity(mld) > 0.5

    for (s in 1:length(STRATEGIES)) {
        for (v in 1:length(VALIDATION)) {
            fold_list <- VALIDATION[[v]](mld, STRATEGIES[[s]])

            for (g in names(fold_list)) {
                basename <- file.path(dir, paste(name, names(STRATEGIES)[s], names(VALIDATION)[v], g, sep = "-"))

                fold_object <- mldr::mldr_from_dataframe(mld$dataset[fold_list[[g]],], labelIndices = mld$labels$index, attributes = mld$attributes, name = mld$name)

                mldr.datasets::write.mldr(fold_object, format = FORMATS, basename = basename, sparse = sparse, noconfirm = TRUE)

                                        # RDS format
                saveRDS(fold_object, file = paste0(basename, ".rds"))
                cat("Exported", basename, "\n")
            }
        }
    }
}

main <- function() {
    args <- commandArgs(trailingOnly = T)

    if (length(args) != 2) {
        message(
            "Partitions an mldr object across several strategies and to several formats",
            "Usage: partition <rds_file> <output_dir>\n"
        )
        stop("Incorrect arguments provided")
    }

    path <- args[1]
    outdir <- args[2]
    
    dataset <- readRDS(path)

    if (class(dataset) == "mldr") {
        partition(dataset, name_of(path), outdir)
    } else {
        cat("Please specify a valid mld file\n")
    }
}

main()
