#!/usr/bin/env Rscript

library(mldr)
library(mldr.datasets)
library(jsonlite)

args <- commandArgs(trailingOnly = T)

if (length(args) != 2) {
    message(
        "Extracts graphics and JSON metadata from an mldr object.\n",
        "Usage: bin/metadata <input_rds> <output_dir>\n"
    )
    stop("Incorrect arguments provided")
}

path <- args[1]
outdir <- args[2]
mldname <- sub(".rds", "", basename(path), fixed = T)
dataset <- readRDS(path)

if (class(dataset) == "mldr") {
  # measures
  sum <- dataset$measures
  
  # concurrence report
  sum$scumble_labels <- dataset$labels$SCUMBLE
  
  # metadata
  sum$name <- mldname
  sum$internal.name <- dataset$name
  sum$attributes <-
    data.frame(
      name = names(dataset$attributes),
      type = dataset$attributes,
      row.names = NULL
    )
  sum$labels <-
    dataset$labels$index - 1 # label indices starting from 0
  sum$bibtex <- dataset$bibtex
  
  key_regex <- function(key)
    paste0(key, "\\s*=\\s*[\"{](.*?)[\"}]")
  extract_bib <- function(bib, key) {
    pattern <- key_regex(key)
    match <- regexpr(key_regex(key), bib, perl = T)
    gsub(pattern, "\\1", regmatches(bib, match), perl = T)
  }
  
  citation_keys <-
    list("title",
         "author",
         "journal",
         "booktitle",
         "year",
         "volume",
         "number",
         "pages")
  sum$citation <- lapply(citation_keys,
                         function(key)
                           extract_bib(dataset$bibtex, key))
  names(sum$citation) <- citation_keys
  
  my_dir <- file.path(outdir, "json")
  if (!dir.exists(my_dir))
    dir.create(my_dir)
  
  sink(file.path(my_dir, paste0(mldname, ".json")))
  cat(toJSON(sum, pretty = T, auto_unbox = T))
  sink()
  
  # Concurrence plot
  selected <- order(dataset$labels$SCUMBLE, decreasing = T)
  tryPlot <- function(filename, max_) {
    selection <-
      dataset$labels$index[selected[1:min(max_, length(selected))]]
    png(filename,
        width = 1024,
        height = 1024,
        pointsize = 15)
    tryCatch({
      plot(
        dataset,
        labelIndices = selection,
        title = "",
        color.function = colorspace::rainbow_hcl
      )
    },
    error = function(...) {
    })
    dev.off()
  }
  
  my_plot_dir <- file.path(outdir, "img")
  if (!dir.exists(my_plot_dir))
    dir.create(my_plot_dir)
  filename <- file.path(my_plot_dir, paste0(mldname, ".png"))
  
  amount <- 10
  tryPlot(filename, amount)
  while (!file.exists(filename) && amount < 100) {
    amount <- amount + 10
    cat("Trying to plot with", amount, "labels...\n")
    tryPlot(filename, amount)
  }
} else {
  cat("Please specify a valid mld path\n")
}
